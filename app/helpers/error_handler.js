// Generated by CoffeeScript 1.8.0
module.exports = function(err, req, res, next) {
  var errMessage, is_production, level, logObject, message, status;
  if (err.status === 403) {
    return res.status(403).end();
  }
  is_production = process.env.NODE_ENV === 'production';
  errMessage = err.message || err;
  logObject = {};
  if (req.log) {
    if (req.log.message) {
      errMessage = req.log.message + ': ' + errMessage;
    }
    if (req.log.logObject && typeof req.log.logObject === 'object') {
      logObject = req.log.logObject;
    }
    delete req.log;
  }
  if (typeof res.expressSend === 'function') {
    res.send = res.expressSend;
    delete res.expressSend;
  }
  if (typeof res.expressRender === 'function') {
    res.render = res.expressRender;
    delete res.expressRender;
  }
  if (typeof res.expressEnd === 'function') {
    res.end = res.expressEnd;
    delete res.expressEnd;
  }
  logObject.error = err.stack ? err.stack : err;
  logObject.ip = req.ip;
  logObject.ulr = req.originalUrl;
  status = err.status || 500;
  level = 'warn';
  if (status < 500) {
    logObject = null;
  } else {
    level = "error";
  }
  logger.log(level, errMessage, logObject);
  res.status(err.status || 500);
  if (!is_production) {
    return res.type('txt').send(err.stack || errMessage);
  }
  message = 'Internal error';
  if (req.accepts('html')) {
    return res.render("" + (res.status || 500), {
      message: message
    });
  }
  if (req.accepts('json')) {
    res.send({
      error: message
    });
    return;
  }
  return res.type('txt').send(message);
};
