// Generated by CoffeeScript 1.8.0
var ApplicationController, SessionsController, async, orm, path, _,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

orm = require('node-orm');

async = require('async');

_ = require('underscore');

path = require('path');

ApplicationController = require('./application');

module.exports = SessionsController = (function(_super) {
  var Categories, Files, Girls;

  __extends(SessionsController, _super);

  function SessionsController() {
    return SessionsController.__super__.constructor.apply(this, arguments);
  }

  Girls = orm.models.girl;

  Files = orm.models.file;

  Categories = orm.models.category;

  SessionsController.prototype.index = function(req, res) {
    return Girls.all(function(err, girls) {
      if (err) {
        return res.status(500).send(err.message || err);
      } else {
        return res.send(girls);
      }
    });
  };

  SessionsController.prototype.create = function(req, res) {
    var categories, description, e, file, name, _ref, _ref1;
    name = req.param('name');
    if (!(typeof name === 'string' && name !== '')) {
      res.status(400).send("Wrong name");
      return;
    }
    file = (_ref = req.files) != null ? _ref.file : void 0;
    if (!(file != null ? (_ref1 = file.type) != null ? _ref1.match(/^(image|video)/) : void 0 : void 0)) {
      res.status(400).send("Wrong file");
      return;
    }
    description = req.param('description');
    categories = req.param('categories') || [];
    if (typeof categories === 'string') {
      try {
        categories = JSON.parse(categories);
      } catch (_error) {
        e = _error;
        categories = [];
      }
    }
    return async.waterfall([
      function(next) {
        return Girls.create({
          name: name,
          description: description
        }, next);
      }, function(girl, next) {
        if (!((categories != null ? categories.length : void 0) > 0)) {
          next(null, girl);
          return;
        }
        categories = _.map(categories, function(category) {
          return new Categories(category);
        });
        return girl.add_categories(categories, next);
      }, function(girl, next) {
        file.is_main = true;
        file.path = file.path.replace(path.resolve('public'), '/static');
        file.type = 'photo';
        file = new Files(file);
        return girl.add_files([file], next);
      }
    ], function(err, girl) {
      if (err) {
        return res.status(500).send(err.message || err);
      } else {
        return res.send(girl);
      }
    });
  };

  SessionsController.prototype.update = function(req, res) {
    var categories, description, name;
    name = req.param('name');
    description = req.param('description');
    categories = req.param('categories');
    if (!(typeof name === 'string' && name !== '')) {
      res.status(400).send("Wrong name");
      return;
    }
    return async.waterfall([
      function(next) {
        return Girls.get(req.params.id, next);
      }, function(girl, next) {
        if (!girl) {
          return next(new Error("Can't find girl"));
        } else {
          girl.name = name;
          if (description) {
            girl.description = description;
          }
          return girl.save(next);
        }
      }, function(girl, next) {
        if (!((categories != null ? categories.length : void 0) > 0)) {
          next(null, girl);
          return;
        }
        categories = _.map(categories, function(category) {
          return new Categories(category);
        });
        return girl.update_categories(categories, next);
      }
    ], function(err, girl) {
      if (err) {
        return res.status(500).send(err.message || err);
      } else {
        return res.send(girl);
      }
    });
  };

  SessionsController.prototype.destroy = function(req, res) {
    return async.waterfall([
      function(next) {
        return Girls.get(req.params.id, next);
      }, function(girl, next) {
        if (!girl) {
          return next(new Error("Can't find girl"));
        } else {
          return girl.remove(next);
        }
      }
    ], function(err) {
      if (err) {
        return res.status(500).send(err.message || err);
      } else {
        return res.end();
      }
    });
  };

  SessionsController.prototype.add_file = function(req, res) {
    var file, id, _ref;
    file = (_ref = req.files) != null ? _ref.file : void 0;
    if (file == null) {
      res.status(400).send("Wrong file");
      return;
    }
    id = req.params.id;
    return async.waterfall([
      function(next) {
        var girl;
        return girl = Girls.get(id, next);
      }, function(girl, next) {
        if (!(girl.files.length > 0)) {
          file.is_main = true;
        }
        file.path = file.path.replace(path.resolve('public'), '/static');
        file.type = 'photo';
        file = new Files(file);
        return girl.setFiles(file, next);
      }
    ], function(err, girl) {
      if (err) {
        return res.status(500).send(err.message || err);
      } else {
        return res.send(girl);
      }
    });
  };

  SessionsController.prototype.destroy_file = function(req, res) {
    return async.waterfall([
      function(next) {
        return Girls.get(req.params.id, next);
      }, function(girl, next) {
        if (!girl) {
          return next(new Error("Can't find girl"));
        } else {
          return girl.remove(next);
        }
      }
    ], function(err) {
      if (err) {
        return res.status(500).send(err.message || err);
      } else {
        return res.redirect(req.headers.referer || '/admin');
      }
    });
  };

  return SessionsController;

})(ApplicationController);
